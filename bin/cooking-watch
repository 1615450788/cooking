#!/usr/bin/env node

var path = require('path')
var CWD_PATH = require('../util/path').CWD_PATH
var program = require('commander')
var logger = require('../util/logger')
var webpack = require('webpack')
var DevServer = require('webpack-dev-server')
var ProgressBarPlugin = require('progress-bar-webpack-plugin')
var chalk = require('chalk')

program
  .option('-c --config <configfile>', 'Webpack config file')
  .parse(process.argv)

// set env
process.env.NODE_ENV = 'development'

console.log()
process.on('exit', function () {
  console.log()
})

var config
var configPath = path.join(CWD_PATH, program.config || 'cooking.conf.js')

// load config
try {
  config = require(configPath)
} catch (e) {
  logger.error('Failed to read the config.')
  logger.fatal(e.stack)
}

// install resolve path
require('../util/load-resolve-path')(config)

// install dev server
config.devServer = require('../util/load-server')(config.devServer)

var port = config.devServer.port || 8080
var hostname = config.devServer.hostname || 'localhost'
var host = (config.devServer.protocol || 'http:') + '//' + hostname + ':' + port

// load hot loader
config.entry = require('../util/hot-reload')(config.entry, host, !!config.devServer)

// run watch
if (!config.devServer.enable) {
  var compiler = webpack(config)

  logger.log('启动中...')
  compiler.watch({}, function (err, stats) {
    if (err) {
      return logger.error(err)
    }

    logger.log('webpack info \n' + stats.toString(config.devServer.stats))
  })
} else {
  // webpack dev server
  logger.log('server 启动中...')

  config.plugins.push(new webpack.HotModuleReplacementPlugin())
  // update path
  config.output.publicPath = config.devServer.publicPath || config.output.publicPath

  new DevServer(webpack(config), config.devServer)
    .listen(port, hostname, function () {
      logger.success('Listening at ' + host)
    })
}

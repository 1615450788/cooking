#!/usr/bin/env node

// hack
// https://gist.github.com/branneman/8048520#6-the-hack
var path = require('path')
var CWD_PATH = require('../util/path').CWD_PATH
var program = require('commander')
var logger = require('../util/logger')
var webpack = require('webpack')
var DevServer = require('webpack-dev-server')

program
  .option('-c --config <configfile>', 'Webpack config file')
  .parse(process.argv)

console.log()
process.on('exit', function () {
  console.log()
})

var config
var configPath = path.join(CWD_PATH, program.config || 'cooking.conf.js')

// load config
try {
  config = require(configPath)
} catch (e) {
  logger.error('Failed to read the config')
  logger.fatal(e.stack)
}

// load extends
config = require('../util/load-extend')(config)

// load hot loader
config.entry = require('../util/hot-reload')(config.entry)

// run webpack
var compiler = webpack(config)

if (!config.devServer || !config.devServer.enable) {
  compiler.watch({}, function (err, stats) {
    if (err) {
      logger.error(err)
      return
    }

    logger.log('webpack info \n' + stats.toString({
      colors: true,
      chunks: false
    }))
  })

  return
}

// webpack dev server
var port = (config.devServer && config.devServer.port) || 8080
var hostname = (config.devServer && config.devServer.hostname) || 'http://localhost'
var host = hostname + ':' + port

config.devServer.stats = (config.devServer && config.devServer.stats) || 'errors-only'

new DevServer(compiler, config.devServer)
  .listen(port, function () {
    logger.success('Listening to ' + host)
  })

#!/usr/bin/env node
'use strict'

// set env
process.env.NODE_ENV = 'development'

const path = require('path')
const CWD_PATH = require('../util/path').CWD_PATH
const program = require('commander')
const logger = require('../util/logger')
const webpack = require('webpack')
const DevServer = require('webpack-dev-server')
const chalk = require('chalk')
const shelljs = require('shelljs')

/**
 * 装配配置文件
 * @param  {string} filename   文件名
 * @return {object}            配置内容
 */
const loadConfig = filename => {
  const configPath = path.join(CWD_PATH, filename)
  let config

  // load config
  try {
    config = require(configPath)
  } catch (e) {
    logger.error('Failed to read the config.')
    logger.fatal(e.stack)
  }

  config.name = filename

  // clean
  if (config.__COOKING_CLEAN__) {
    shelljs.rm('-rf', config.output.path)
  }

  // install resolve path
  require('../util/load-resolve-path')(config)

  // install dev server
  config.devServer = require('../util/load-server')(config.devServer)

  if (config.devServer.enable) {
    config.devServer.host = config.devServer.protocol + '//' + config.devServer.hostname + ':' + config.devServer.port
  }

  // load hot loader
  config.entry = require('../util/hot-reload')(config.entry, config.devServer)

  // update path
  config.output.publicPath = config.devServer.publicPath || config.output.publicPath || '/'

  // postcss
  config.postcss = require('../util/load-postcss')(config.postcss)

  config.plugins.push(new webpack.ProgressPlugin())

  return config
}

program
  .option('-c --config [configfile]', 'config file', val => val.split(','))
  .parse(process.argv)

program.config = program.config || ['cooking.conf.js']

let configs = []

// 加载配置
program.config.forEach(config => {
  config = loadConfig(config)
  configs.push(config)
  configs.devServer = config.devServer
})

// run watch
if (!configs.devServer.enable) {
  const compiler = webpack(configs)

  logger.log('启动中...')
  compiler.watch({}, (err, stats) => {
    if (err) {
      return logger.error(err)
    }

    logger.log('webpack info \n' + stats.toString(configs.devServer.stats))
  })
} else {
  // webpack dev server
  logger.log('server 启动中...')
  configs.map(config => config.plugins.push(new webpack.HotModuleReplacementPlugin()))

  const devServer = configs.devServer

logger.success(`Listening at ${devServer.host}`)
  new DevServer(webpack(configs), devServer)
    .listen(devServer.port, devServer.hostname)
}

#!/usr/bin/env node

// set env
process.env.NODE_ENV = 'development'

var path = require('path')
var CWD_PATH = require('../util/path').CWD_PATH
var program = require('commander')
var logger = require('../util/logger')
var webpack = require('webpack')
var DevServer = require('webpack-dev-server')
var ProgressBarPlugin = require('progress-bar-webpack-plugin')
var chalk = require('chalk')
var shelljs = require('shelljs')

/**
 * 装配配置文件
 * @param  {string} filename   文件名
 * @return {object}            配置内容
 */
var loadConfig = function (filename) {
  var configPath = path.join(CWD_PATH, filename)
  var config

  // load config
  try {
    config = require(configPath)
  } catch (e) {
    logger.error('Failed to read the config.')
    logger.fatal(e.stack)
  }

  config.name = filename

  // clean
  if (config.__COOKING_CLEAN__) {
    shelljs.rm('-rf', config.output.path)
  }

  // install resolve path
  require('../util/load-resolve-path')(config)

  // install dev server
  config.devServer = require('../util/load-server')(config.devServer)

  if (config.devServer.enable) {
    config.devServer.host = config.devServer.protocol + '//' + config.devServer.hostname + ':' + config.devServer.port
  }

  // load hot loader
  config.entry = require('../util/hot-reload')(config.entry, config.devServer)

  // update path
  config.output.publicPath = config.devServer.publicPath || config.output.publicPath || '/'

  return config
}

program
  .option('-c --config [configfile]', 'config file', function (val) {
    return val.split(',')
  })
  .parse(process.argv)

console.log()
process.on('exit', function () {
  console.log()
})

program.config = program.config || ['cooking.conf.js']

var configs = []

// 加载配置
for (var i = 0; i < program.config.length; i++) {
  var config = loadConfig(program.config[i])

  configs.push(config)
  configs.devServer = config.devServer
}

// run watch
if (!configs.devServer.enable) {
  var compiler = webpack(configs)

  logger.log('启动中...')
  compiler.watch({}, function (err, stats) {
    if (err) {
      return logger.error(err)
    }

    logger.log('webpack info \n' + stats.toString(config.devServer.stats))
  })
} else {
  // webpack dev server
  logger.log('server 启动中...')

  for (var i = 0; i < configs.length; i++) {
    configs[i].plugins.push(new webpack.HotModuleReplacementPlugin())
  }

  var devServer = configs.devServer

  new DevServer(webpack(configs), devServer)
    .listen(devServer.port, devServer.hostname, function () {
      logger.success('Listening at ' + devServer.host)
    })
}
